x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
testdir<-dir.create()
testdir<-dir.create(old.dir)
testdir<-dir.create(/Users/ChristianLagares)
testdir<-dir.create(~/Users/ChristianLagares)
testdir<-dir.create("/Users/ChristianLagares")
dir.create(testdir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
dir()
file.exists(mytest.R)
file.exists("mytest.R")
file.info(mytest.R)
file.info("mytest.R")
file.rename(mytest.R,mytest2.R)
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2",testdir3))
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
unlink("testdir2",recursive =TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"Christian")
my_name
paste(my_name,collapse=" ")
paste("Hello," "world!", sep = " ")
paste("Hello" "world!", sep = " ")
paste("Hello" "world!", collapse = " ")
paste("Hello,", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(c("X","Y","Z"),sep=" ")
paste(c("X","Y","Z"),sep="")
paste(c(1:3),c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
bye()
x<-c(1,2,3)
y<-c(4,5,6)
cbind(x,y)
library(swirl)
install_from_swirl("Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Open Intro")
install_from_swirl("Regression Models")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Statistical Inference")
swirl()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
my_data/0
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect1,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
## [Put comments here that describe what your functions do]
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(Inverse)
m <<- Inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- ginv(data, ...)
x$setInverse(m)
m
}
makeCacheMatrix(x = matrix(runif(36),ncol = 6,nrow = 6))
cacheSolve(x)
x = matrix(runif(36),ncol = 6,nrow = 6)
makeCacheMatrix(x)
cacheSolve(x)
## [Put comments here that describe what your functions do]
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(Inverse)
m <<- Inverse
getInverse <- function() m
as.data.frame(list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse))
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- ginv(data, ...)
x$setInverse(m)
m
}
makeCacheMatrix(x)
as.data.frame(makeCacheMatrix(x))
## [Put comments here that describe what your functions do]
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(Inverse)
m <<- Inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x[[get()]]
m <- ginv(data, ...)
x[[setInverse(m)]]
m
}
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix(runif(36, max = 100), ncol = 6, nrow = 6)) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(Inverse)
m <<- Inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
}
makeCacheMatrix()
m
set
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
x = numeric()
makeVector(x)
cachemean(x)
exists(x)
exists('x')
x = matrix(runif(36),ncol = 6,nrow = 6)
x
x = matrix(runif(81),ncol = 9,nrow = 9)
x
x = matrix(runif(81,max = 100),ncol = 9,nrow = 9)
x
## cachematrix.R contains functions makeCacheMatrix and cacheSolve
## makeCacheMatrix produces an object on top of the normal R matrix
## with a setter and getter, and then a setter and getter for the inverse
## of the matrix. We do this because that way we can have an object that
## contains the matrix and also caches its inverse in case we need
## to access the inverse of the matrix repeatedly. Matrix inversion
## is a costly computation, so it is useful to store this value.
## makeCacheMatrix is a function that contains multiple functions
## and stored values, i.e. a function that is also an object
## essentially it's a constructor for the CacheMatrix object
## and takes a matrix, stores it and has setting and getting
## functions for the matrix and its invers
makeCacheMatrix <- function(x = matrix()) {
## m is the variable containing the inverse
m <- NULL
## set(y) takes takes a vector
## and chances the value of the stored vector
## we don't really need to use this. it also
## sets the cached matrix to null
set <- function(y) {
x <<- y
m <<- NULL
}
## get() returns the matrix x
get <- function() x
## setinverse sets the inverse
## its used by cacheSolve
## but can also be called using the $ operator
setinverse <- function(inv) m <<- inv
## get inverse returns the inverse of the matrix x
## stored in the variable m
getinverse <- function() m
## this list object basically serves as an environment
## connects symbols within the makeCacheMatrix function
## with their corresponding values, which are also functions
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve takes a cacheMatrix object
## and calculates the inverse if the inverse is not already calculated
## ie the input 'x' is not a matrix but a cacheMatrix containing a matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## first it checks to see if the inverse is already calculated
## by calling the getinverse() method of the cacheMatrix object
m <- x$getinverse()
## if the inverse is already calculated and cached, it just returns
## the value in cache, ie the precalculated inverse matrix
if(!is.null(m)) {
message("getting cached data")
return(m)
}
## or else it gets the matrix from the cacheMatrix object
data <- x$get()
## calls the builtin matrix inversion method, solve()
m <- solve(data, ...)
## and sets that as the cached inverse matrix within the cacheMatrix object
x$setinverse(m)
m
}
makeCacheMatrix()
cacheSolve()
library(swirl)
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- dbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -(5:20)
)
select(cran, -5:20 )
-5:20
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
swirl()
library(swirl)
swirl()
filter(cran,size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
?swirl
install_from_swirl("Exploratory_Data_Analysis")
swirl()
install.packages("rmarkdown")
library(knitr)
library('knitr')
knit_engines
names(knit_engines$get())
knit_engines
knit_theme
knit_theme()
knit_engines = "python"
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "nlme", "nnet", "R6", "RCurl", "rpart", "spatial", "stringi", "survival"))
available.packages()
R_Packs <- available.packages()
View(R_Packs)
install.packages(pkgs = c("PythonInR","rPython"))
install.packages("PythonInR")
install.packages("RCryptsy")
install.packages("scrypt")
library('scrypt')
hashPassword('Lagares7Cris0221')
hashPassword('133770')
hashPassword('133770', maxmem = 0.025)
hashPassword('133770', maxmem = 0.0001)
hash <- hashPassword('133770', maxmem = 1)
hash <- hashPassword('133770', maxmem = .1)
install.packages('xtable')
library(xtable)
?xtable
install.packages("digest")
library(digest)
AES()
AES(c2NyeXB0ABIAAAAIAAAAAeCnYqz5xfvJuYtY0PfiuhxeyCuAvRQjtxV58NY9EB99VJOaVS3gjO2ubv9giep3YAaoRMyahMjbPPSMKLh6uaX/uvV+DSej9QZa06A6UmAY)
AES("c2NyeXB0ABIAAAAIAAAAAeCnYqz5xfvJuYtY0PfiuhxeyCuAvRQjtxV58NY9EB99VJOaVS3gjO2ubv9giep3YAaoRMyahMjbPPSMKLh6uaX/uvV+DSej9QZa06A6UmAY")
AES("c2NyeXB0ABIAAAAIAAAAAeCnYqz5xfvJuYtY")
AES("12345678910111213141516")
AES("12345678")
AES("123458")
AES("1234")
aes$encrypt('Hello, world!')
iv <- sample(0:255, 16, replace=TRUE)
aes <- AES(key, mode="CBC", iv)
code <- aes$encrypt('Hello, world!')
code
iv <- sample(0:255, 16, replace=TRUE)
aes <- AES(key, mode="CBC", iv)
msg <- as.raw(c(1:16, 1:16))
key <- as.raw(1:16)
aes <- AES(key, mode="ECB")
aes$encrypt(msg)
aes$decrypt(aes$encrypt(msg), raw=TRUE)
iv <- sample(0:255, 16, replace=TRUE)
aes <- AES(key, mode="CBC", iv)
code <- aes$encrypt(msg)
code
install.packages("filehash")
?par
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
library(dplyr)
q()
install.packages("UsingR")
library(UsingR)
data("galton")
library(reshape2); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth = 1)
g <- g + facet_grid(. ~ variable)
g
library(manipulate)
install.packages("manipulate")
library(manipulate)
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist('training$SuperPlasticizer')
hist(concrete$SuperPlasticizer)
View(concrete)
supP <- concrete$Superplasticizer
hist(supP)
log(supP)
hist(log(supP))
setwd("~/Practical Machine Learning")
load <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("data.table", "caret", "randomForest", "foreach", "rpart", "rpart.plot", "corrplot")
load(packages)
install.packages(e107)
install.packages("e1071")
file.exists(training_data)
!file.exists(training_data)
exists(training_data)
!exists(training_data)
!exists('training_data')
getwd()
